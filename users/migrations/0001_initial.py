# Generated by Django 2.0.8 on 2018-11-23 11:27

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_cryptography.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('rating', models.DecimalField(decimal_places=2, default=50, max_digits=10)),
                ('emp_title', models.CharField(max_length=256)),
                ('annual_income', models.DecimalField(decimal_places=2, max_digits=10)),
                ('is_creditor', models.BooleanField(default=False)),
                ('is_locked', models.BooleanField(default=False)),
                ('telephone', models.CharField(max_length=32)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.EmailField(max_length=254)),
                ('passport_number', models.CharField(max_length=128)),
            ],
            options={
                'verbose_name_plural': 'users',
                'verbose_name': 'user',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Balance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('balance', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='CreditCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card_type', django_cryptography.fields.encrypt(models.CharField(choices=[('visa', 'visa'), ('master_card', 'mast'), ('maestro', 'maes')], max_length=4))),
                ('number', django_cryptography.fields.encrypt(models.CharField(max_length=16))),
                ('cvc_code', django_cryptography.fields.encrypt(models.CharField(max_length=3))),
                ('expiration_date', django_cryptography.fields.encrypt(models.CharField(max_length=3))),
                ('owner', django_cryptography.fields.encrypt(models.CharField(max_length=128))),
                ('connected_balance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cards', to='users.Balance')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='balance',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='owner', to='users.Balance'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
